PART TWO
DROP Database IF EXISTS Hotel;
CREATE Database Hotel

use Hotel;

DROP TABLE IF EXISTS Rooms;
CREATE TABLE Rooms(
Room_Id INT NOT NULL,
Room INT NOT NULL,
`Type` VARCHAR(10) NOT NULL,
Amenities VARCHAR(50) NOT NULL,
ADA_Accessible VARCHAR(5) NOT NULL,
Standard_Occupancy INT NOT NULL,
Maximum_Occupancy INT NOT NULL,
Base_Price VARCHAR(10) NOT NULL,
Extra_Person VARCHAR(10) NULL,
PRIMARY KEY(Room_Id));

DROP TABLE IF EXISTS Guests;
CREATE TABLE Guests(
Guest_Id INT NOT NULL,
Name VARCHAR(30) NOT NULL,
Address VARCHAR(70) NOT NULL,
City VARCHAR(30) NOT NULL,
State VARCHAR(30) NOT NULL,
Zip INT NOT NULL,
Phone VARCHAR(20) NOT NULL,
PRIMARY KEY (Guest_Id));

DROP TABLE IF EXISTS Reservations;

CREATE TABLE Reservations(
Reservation_Id INT NOT NULL,
Room_Number INT NOT NULL,
Name VARCHAR(30) NOT NULL,
Adults INT NOT NULL,
Children INT NOT NULL,
Start_Date TIMESTAMP NOT NULL,
End_Date TIMESTAMP NOT NULL,
Total_Room_Cost VARCHAR(10) NOT NULL,
Room_Id INT NOT NULL,
PRIMARY KEY (Reservation_Id),
FOREIGN KEY (Room_Id)
REFERENCES Rooms(Room_Id));






PART 3
use Hotel;

INSERT INTO Rooms(
Room_Id,Room, Type, Amenities, ADA_Accessible, Standard_Occupancy, Maximum_Occupancy, Base_Price, Extra_Person)
VALUES
(1,'201'	,'Double',	'Microwave, Jacuzzi',	'No',	'2',	'4',	'$199.99',	'$10'),
(2,'202'  , 'Double',	'Refrigerator',	'Yes',	'2',	'4',	'$174.99',	'$10'),
(3,'203'	,'Double',	'Microwave, Jacuzzi',	'No',	'2',	'4',	'$199.99',	'$10'),
(4,'204'	,'Double',	'Refrigerator',	'Yes',	'2',	'4',	'$174.99',	'$10'),
(5,'205'	,'Single',	'Microwave, Refrigerator, Jacuzzi',	'No',	'2',	'2',	'$174.99','NA'),
(6,'206'	,'Single',	'Microwave, Refrigerator',	'Yes',	'2',	'2',	'$149.99','NA'),
(7,'207'	,'Single',	'Microwave, Refrigerator, Jacuzzi',	'No',	'2',	'2',	'$174.99','NA'),
(8,'208'	,'Single',	'Microwave, Refrigerator',	'Yes',	'2',	'2',	'$149.99','NA'),
(9,'301'	,'Double',	'Microwave, Jacuzzi',	'No',	'2',	'4',	'$199.99',	'$10'),
(10,'302'	,'Double',	'Refrigerator',	'Yes',	'2',	'4',	'$174.99',	'$10'),
(11,'303'	,'Double',	'Microwave, Jacuzzi',	'No',	'2',	'4',	'$199.99',	'$10'),
(12,'304'	,'Double',	'Refrigerator',	'Yes',	'2',	'4',	'$174.99',	'$10'),
(13,'305'	,'Single',	'Microwave, Refrigerator, Jacuzzi',	'No',	'2'	,'2',	'$174.99','NA'),
(14,'306'	,'Single',	'Microwave, Refrigerator',	'Yes',	'2',	'2',	'$149.99','NA'),
(15,'307'	,'Single',	'Microwave, Refrigerator, Jacuzzi',	'No',	'2',	'2',	'$174.99','NA'),
(16,'308'	,'Single',	'Microwave, Refrigerator',	'Yes',	'2',	'2',	'$149.99','NA'),
(17,'401'	,'Suite',	'Microwave, Refrigerator, Oven',	'Yes',	'3',	'8',	'$399.99',	'$20'),
(18,'402'	,'Suite',	'Microwave, Refrigerator, Oven',	'Yes',	'3',	'8',	'$399.99',	'$20');


INSERT INTO Guests(
Guest_Id,Name, Address, City, State, Zip, Phone)
VALUES
(1,'Cheryl Ong',	'21 New Beach Road',	'Singapore',	'Singapore',	520021	,'94640188'),
(2,'Mack Simmer',	'379 Old Shore Street',	'Council Bluffs',	'IA',	51501,	'(291) 553-0508'),
(3,'Bettyann Seery',	'750 Wintergreen Dr.',	'Wasilla',	'AK',	99654,	'(478) 277-9632'),
(4,'Duane Cullison',	'9662 Foxrun Lane',	'Harlingen',	'TX',	78552,	'(308) 494-0198'),
(5,'Karie Yang',	'9378 W. Augusta Ave.',	'West Deptford',	'NJ',	08096,	'(214) 730-0298'),
(6,'Aurore Lipton',	'762 Wild Rose Street',	'Saginaw',	'MI',	48601,	'(377) 507-0974'),
(7,'Zachery Luechtefeld',	'7 Poplar Dr.',	'Arvada',	'CO',	80003,	'(814) 485-2615'),
(8,'Jeremiah Pendergrass',	'70 Oakwood St.',	'Zion',	'IL',	60099,	'(279) 491-0960'),
(9,'Walter Holaway',	'7556 Arrowhead St.',	'Cumberland',	'RI',	02864,	'(446) 396-6785'),
(10,'Wilfred Vise',	'77 West Surrey Street',	'Oswego',	'NY',	13126,	'(834) 727-1001'),
(11,'Maritza Tilton',	'939 Linda Rd.',	'Burke',	'VA',	22015,	'(446) 351-6860'),
(12,'Joleen Tison',	'87 Queen St.',	'Drexel Hill',	'PA',	19026,	'(231) 893-2755');


INSERT INTO Reservations(
Reservation_Id,Room_Number, Name, Adults, Children, Start_Date, End_Date, Total_Room_Cost,Room_Id)
VALUES
(1,308,	'Mack Simmer',	1,	0,	'2/2/2023',	'2/4/2023',	'$299.98',),
(2,203,	'Bettyann Seery',	2,	1,	'2/5/2023',	'2/10/2023',	'$999.95',),
(3,305,	'Duane Cullison',	2	,0,	'2/22/2023',	'2/24/2023',	'$349.98',),
(4,201,	'Karie Yang',	2,	2,	'3/6/2023',	'3/7/2023',	'$199.99',),
(5,307,	'Cheryl Ong',	1,	1,	'3/17/2023',	'3/20/2023',	'$524.97',),
(6,302,	'Aurore Lipton',	3,	0,	'3/18/2023',	'3/23/2023',	'$924.95',),
(7,202,	'Zachery Luechtefeld',	2,	2,	'3/29/2023',	'3/31/2023',	'$349.98',),
(8,304,	'Jeremiah Pendergrass',	2,	0,	'3/31/2023',	'4/5/2023',	'$874.95',),
(9,301,	'Walter Holaway',	1,	0,	'4/9/2023',	'4/13/2023',	'$799.96',),
(10,207,	'Wilfred Vise',	1,	1,	'4/23/2023',	'4/24/2023',	'$174.99',),
(11,401,	'Maritza Tilton',	2,	4,	'5/30/2023',	'6/2/2023',	'$1,199.97',),
(12,206,	'Joleen Tison',	2,	0,	'6/10/2023',	'6/14/2023',	'$599.96',),
(13,208,	'Joleen Tison',	1,	0,	'6/10/2023',	'6/14/2023',	'$599.96',),
(14,304,	'Aurore Lipton',	3,	0,	'6/17/2023',	'6/18/2023',	'$184.99',),
(15,205,	'Cheryl Ong',	2,	0,	'6/28/2023',	'7/2/2023',	'$699.96',),
(16,204,	'Walter Holaway',	3,	1,	'7/13/2023',	'7/14/2023',	'$184.99',),
(17,401,	'Wilfred Vise',	4,	2,	'7/18/2023',	'7/21/2023',	'$1,259.97',),
(18,303,	'Bettyann Seery',	2,	1,	'7/28/2023',	'7/29/2023',	'$199.99',),
(19,305,	'Bettyann Seery',	1,	0,	'8/30/2023',	'9/1/2023',	'$349.98',),
(20,208,	'Mack Simmer',	2,	0,	'9/16/2023',	'9/17/2023',	'$149.99',),
(21,203,	'Karie Yang',	2,	2,	'9/13/2023',	'9/15/2023',	'$399.98',),
(22,401,	'Duane Cullison',	2,	2,	'11/22/2023',	'11/25/2023',	'$1,199.97',),
(23,206,	'Mack Simmer',	2,	0,	'11/22/2023',	'11/25/2023',	'$449.97',),
(24,301,	'Mack Simmer',	2,	2,	'11/22/2023',	'11/25/2023',	'$599.97',),
(25,302,	'Maritza Tilton',	2,	0,	'12/24/2023',	'12/28/2023',	'$699.96',);


#delete Jeremiah Pendergrass and his reservations from the database.
#Deleting data should start with records that reference Jeremiah Pendergrass using a foreign key and then delete the record from the guest table as the last step.
#The scripts should only delete records related to Jeremiah Pendergrass and his reservations. They should not delete any room data.

DELETE FROM Reservations WHERE Name='Jeremiah Pendergrass';
DELETE FROM Guests WHERE NAME='Jeremiah Pendergrass';





PART FOUR
#1.	Write a query that returns a list of reservations that end in July 2023, 
#	including the name of the guest, the room number(s), and the reservation dates.
SELECT Reservations.Name, Reservations.Room_Number, Reservation.Start_Date, Reservation.End_Date
FROM Reservations 
WHERE Reservation.End_Date BETWEEN '07/01/2023' AND '07/31/2023';

#2.	Write a query that returns a list of all reservations for rooms with a jacuzzi, 
#	displaying the guest's name, the room number, and the dates of the reservation.
SELECT Reservations.Name, Reservations.Room_Number, Reservation.Start_Date, Reservation.End_Date
FROM Reservations
JOIN Rooms
		ON Reservations.Room_Id=Rooms.Room_Id
WHERE Rooms.Amenities LIKE '%Jacuzzi%';

#3.	Write a query that returns all the rooms reserved for a specific guest, 
#	including the guest's name, the room(s) reserved, the starting date of the reservation, 
#	and how many people were included in the reservation. (Choose a guest's name from the existing data.)
SELECT Reservations.Name, Reservations.Room_Number, Reservation.Start_Date, Reservation.End_Date,SUM(Adults*Children)AS NumberOfPeople
FROM Reservations
WHERE Reservations.Name = 'Cheryl Ong'
GROUP BY Reservations.Name;


#4.	Write a query that returns a list of rooms, reservation ID, and per-room cost for each reservation. 
#	The results should include all rooms, whether or not there is a reservation associated with the room.
SELECT Rooms.Room, Reservations.Reservation_Id, Reservations.Total_Room_Cost
FROM Rooms
LEFT JOIN Reservations
	ON Rooms.Room_Id=Reservations.Room_Id
ORDER BY Rooms.Room;


#5.	Write a query that returns all the rooms accommodating at least three guests and that are reserved on any date in April 2023.
SELECT Reservations.Room_Number, SUM(Adults*Children) AS NumberofGuests, Reservation.Start_Date
FROM Reservations
WHERE Reservations.Start_Date  > '04/01/2023';

#6.	Write a query that returns a list of all guest names and the number of reservations per guest, 
#	sorted starting with the guest with the most reservations and then by the guest's last name.
SELECT SUBSTRING(Reservations.Name, 1, CHARINDEX(' ', Name) - 1) AS FirstName,     
       SUBSTRING(Reservations.Name, CHARINDEX(' ', Name) + 1, LEN(Name) - CHARINDEX(' ', Name)) AS LastName,
		COUNT(Reservations.Name)AS NumberOfReservations
FROM Reservations
GROUP BY Reservations.FirstName, Reservations.LastName
ORDER BY COUNT(Reservations.Name), Reservations.LastName;

#7.	Write a query that displays the name, address, and phone number of a guest based on their phone number.
#(Choose a phone number from the existing data.)
SELECT Guests.Name, Guests.Address, Guests.Phone
FROM Guests
WHERE Guests.Phone = '(478) 277-9632';

